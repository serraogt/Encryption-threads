import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Specific_key_encryp {
    private static javax.crypto.SecretKey SecretKey;

    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

        KeyGenerator keygen = KeyGenerator.getInstance("AES");

        SecureRandom secureRandom= new SecureRandom();
        keygen.init(256,secureRandom);
        //user provided randomness */

        byte[] secret = "dgkvkvjeglknr394".getBytes("UTF-8");
        SecretKeySpec secretKey = new SecretKeySpec(secret,"AES");
        //specific key

        //using
        // static Cipher getInstance(String transformation);
        Cipher cipher=Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE,secretKey);

        //cipher.update()
        //cipher.update()
        //cipher.doFinal()
        //cipher.doFinal(byte[] input) to be encrypted


        String special= "this is special";
        byte[] transformed= special.getBytes(StandardCharsets.UTF_8);
        byte[] plain_text= "encrypt this".getBytes(StandardCharsets.UTF_8);
        byte[] plain_text2="and this".getBytes(StandardCharsets.UTF_8);
        cipher.init(Cipher.ENCRYPT_MODE,secretKey);
        byte[] encrypted = cipher.update(transformed);
        byte[] encrypted_1= cipher.update(plain_text);
        byte[] encrypted_2= cipher.doFinal(plain_text2);


        cipher.init(Cipher.DECRYPT_MODE,secretKey);
        byte[] decrypted_text= cipher.doFinal(encrypted_2);
        String decrypted_t=new String(decrypted_text);
        System.out.println(decrypted_t);
    }
}
